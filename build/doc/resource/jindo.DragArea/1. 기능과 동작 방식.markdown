드래그 기능은 일반적으로 레이어라고 일컫는 영역을 마우스로 이동 가능하게 만드는 것을 말하고, DragArea 컴포넌트는 특정 영역 하위에 포함된 여러 요소들을 드래그 가능하도록 만든다. 일단 기본적인 동작확인을 위해 예제부터 작성해보자.

#### 드래그할 영역 정하기

이제 HTML body 영역에 드래그할 임의의 div 태그를 삽입한다. DragArea 컴포넌트는 기본값으로 'draggable' 이라는 클래스 이름이 지정된 모든 태그를 드래그 가능하도록 만든다.

	<div class="dragarea">
	    <div class="draggable">Drag me</div>
	</div>

#### 인스턴스 생성하기

초기화 옵션값을 재지정 할 수 있지만, 일단 컴포넌트에 지정된 기본값을 그대로 사용해 인스턴스를 생성한다.

	var oDragArea = new jindo.DragArea(document);

#### 상위 영역을 벗어날 수 없도록 설정하기

옵션 bFlowOut의 디폴트 값은 true이다. 이 값을 false로 지정해 상위 영역을 벗어나 드래드될 수 없도록 설정할 수 있다.

	var oDragArea = new jindo.DragArea(jindo.$("dragarea"), { bFlowOut : false });

#### 일정 범위 이상 잡고 끌어야 드래그되도록 설정하기

DragArea는 마우스 버튼이 클릭된채로 1픽셀이라도 움직이게 되는 경우 드래그를 시작하게 된다. 사용자는 단순히 클릭을 하였는데 DragArea가 민감하게 반응하여 원했던 동작이 아닌 드래그가 되어버리는 경우가 발생할 수 있다. 이런 경우를 방지하기 위해 nThreshold값을 지정하여 일정 픽셀 이상 움직여야 드래그가 시작되도록 지정할 수 있다.

	var oDragArea = new jindo.DragArea(jindo.$("dragarea"), { nThreshold : 10 });

#### jindo.DragArea의 커스텀 이벤트

jindo.DragArea의 커스텀 이벤트를 활용하면 다양한 드래그형태를 구현할 수 있다. 가령, 드래그 중일때 마우스 커서 모양을 변경한다든지, 윈도우 창처럼 드래그 되는 제목표시줄 영역을 따로 만드는 등의 초기화 옵션으로 제어할수 없는 기능들을 제어할 수 있게된다.

#### 커스텀이벤트 발생 순서

DragArea 컴포넌트는 아래 그림에서 보듯이 총 6가지 커스텀 이벤트를 순차적으로 발생시킨다. handleDown과 handleUp 이벤트는 실제로 드래깅이 시작되었는지와 관계없이 발생하기 때문에, 실제 드래깅이 일어날때 처리하기엔 적합하지 않다. 반면, dragStart-beforeDrag-drag-dragEnd는 실제로 드래깅이 시작되어 종료될때까지 발생하는 이벤트이다. 특히 beforeDrag와 drag 이벤트는 드래그 이동 중에 계속해서 발생하기 때문에, 이 시점에 복잡한 계산을 구현 한다면 성능문제를 일으킬 수 있기때문에 주의해야한다. 

![](CustomEvent.png "")

초기화 옵션중 nThreshold 값을 경계로 DragArea 컴포넌트는 dragStart 이벤트를 발생시킨다.

#### 서로 다른 역할을 하는 드래깅 엘리먼트 elArea, elDrag, elHandle

이벤트 발생 시점과 더불어 반드시 이해 해야할것은 바로 3가지 서로 다른 역할을 하는 엘리먼트들이다. 아래 그림의 elArea와 elHandle 그리고 elDrag가 있다. 이 3가지 엘리먼트들은 커스텀 이벤트 핸들러에 객체형태로 넘겨받기 때문에 반드시 쓰임에 맞게 구분하여 사용해야한다.

![](Basic.png "")

* 먼저 elArea는 컴포넌트 초기화시, 첫번째 인자로 넘겨받는 필수 인자로써, Drag 될 엘리먼트의 상위 엘리먼트를 의미한다. 즉, 이 영역의 자식 엘리먼트 중 특정 클래스(draggable)로 지정된 모든 엘리먼트들은 드래그된다.
* 두번째로, elHandle 은 초기화 옵션의 className으로 지정된 드래그될 핸들을 의미한다. 하지만, 실제 드래그 되는 엘리먼트와 다를 수 있다.
* 마지막으로, elDrag 는 실제로 드래그 되는 엘리먼트를 나타낸다. 특별히 다른 엘리먼트로 지정하지 않으면, elHandle과 동일하다.

커스텀 이벤트들을 핸들링하는 예제는 제공되는 데모페이지와 아래 표를 참고하자