jindo.Slider 컴포넌트는 어떤 특정한 영역 내의 값을 슬라이더 바를 이동하여 세밀한 값을 입력받을 때 사용하기 적합한 컴포넌트이다.
 
Slider는 아래 그림과 같이 track과 thumb 객체로 구성된다.

![](slider.png "")

#### 슬라이더를 구현할 대상 객체 생성

	<head>
		<style type="text/css">
				.slider {
				background:#eee url(./images/grid.gif) no-repeat 5px bottom; position:relative;
				width:211px; height:40px;
			}
			 
			.slider .slider-thumb {
				background:url(./images/thumb.gif) no-repeat;
				position:absolute; width:11px; height:21px; overflow:hidden;
				cursor:default;
			}
		</style>
	</head>
	<body>
		<div class="slider" id="simpleSlider">
			<div class="slider-thumb"> </div>
		</div>
	</body>

* 슬라이더와 슬라이더 thumb 객체의 style을 설정 합니다.
* 슬라이더를 구현할 객체를 "slider"라는 클래스 명으로 생성 합니다.
* 슬라이더의 thumb 객체을 구현할 객체를 "slider-thumb"클래스 명으로 생성합니다.
	
#### 간단한 사용 예

oSlider라는 Slider 컴포넌트의 객체를 생성하고, id가 "simpleSlider"라는 객체에 슬라이더를 구현 한다.

	var oSlider = new jindo.Slider(jindo.$('simpleSlider'));
	
#### 세로 슬라이더 구현 방법

옵션에 bVertical : true 를 적용 한다.

	var oSlider = new jindo.Slider(jindo.$('simpleSlider'), { bVertical : true });
	
#### 커스텀 이벤트 핸들링

슬라이더 구현 중 특정 시점에서 스크립트를 실행 하려면 다음과 같이 커스텀 이벤트 핸들러를 바인딩 할 수 있다.

	var oSlider = new jindo.Slider(jindo.$('simpleSlider')).attach({
	    beforeChange : function(oCustomEvent) {
	        //Thumb이 움직이기 전에 발생
	    },
	    change : function(oCustomEvent) {
	        //Thumb을 Drop한 이후 발생
	        //      *  nIndex : 위치값을 가져올 Thumb의 index
	        //                  (생략시 모든 Thumb의 위치값 배열을 리턴)
	        //      * nPos : 설정할 위치값(pixel단위)
	        //      * nValue : drop 이후의 슬라이더 값.
	    }
	});

