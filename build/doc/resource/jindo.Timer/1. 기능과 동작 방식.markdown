자바스크립트에서 제공하는 타이머 관련 함수는 두 가지가 있다.
* 지정된 시간 뒤에 실행할 수 있는 setTimeout()
* 지정된 시간마다 반복 실행할 수 있는 setInterval()
x축이 시간인 그래프로 표현해보면 다음과 같이 특정한 시간대에 코드를 실행하는 형태로 표현할 수 있다.

![](Timer.JavaScriptTimeMethod.png "")

그러면, 1000ms 뒤에 특정한 코드를 실행시켜야 하고 사용자가 화면에 손가락을 대었다 때는 경우의 시간은 제외해야 한다면 어떻게 구현해야할까?

setTimeout()을 사용한다면 코드가 실행되었을 때 setTimeout()을 실행시켰다가 화면에 손가락을 댄 순간 clearTimeout()을 호출하여 setTimeout()을 종료한 후,
손가락을 땐 순간 1000ms시간에서 손가락을 댄 순간까지의 시간을 뺀 만큼 후에 동작하도록 설정하여 setTimeout()을 실행해야한다.

반면에, jindo.Timer 컴포넌트를 사용하면 시작(start)한 후, 화면에 손가락을 댄 순간 pause()를 호출하여 잠시 멈춘 후에 손가락을 땐 순간 resume()을 호출하여 타이머를 다시 동작 시킬 수 있다.

![](Timer.Scenario.png "")

jindo.Timer는 이처럼 불편한 자바스크립트의 타이머 관련 함수를 편리하게 사용할 수 있게 해준다.

#### jindo.Timer의 기능

* 타이머 하나로 한 번 또는 반복적으로 실행을 할 수 있습니다.
* 타이머를 시작한 다음 일시정지 시킬 수 있습니다.
* 타이머를 다시 시작할 수 있습니다.

#### 1초후에 함수 실행하기

	var oTimer = new jindo.Timer();
	oTimer.start(function() {
	    //실행할 함수 정의
	}, 1000);

#### 1초마다 함수 반복실행하기

	var oTimer = new jindo.Timer();
	oTimer.start(function() {
	    //실행할 함수 정의
	    return true; //setInterval()처럼 반복 실행시키고 싶으면 true를 리턴한다. (아닌경우 생략가능)
	}, 1000);

#### 커스텀 이벤트 발생시점

![](Timer.CustomEvent.png "")

+ new jindo.Timer()를 사용하여 Timer를 생성한다.
+ oTimer.start(fnCallback, 100)를 호출해서 Timer를 시작한다.
+ fnCallback이 실행되기 전, Timer가 대기상태로 들어갔음을 알리는 wait 이벤트가 발생한다.
+ Timer가 fnCallback을 실행함을 알리는 run 이벤트가 발생한다.
+ fnCallback() 실행 결과 값을 반복적으로 실행되려면 true 값을 리턴한다. 이후에는 다시 wait 이벤트와 run이벤트가 반복된다.
+ 리턴값이 없거나 false이면 타이머가 종료되고 end 이벤트가 발생한다.
+ 타이머가 실행중일 때 oTimer.abort()가 호출되면 abort 이벤트가 발생한다.